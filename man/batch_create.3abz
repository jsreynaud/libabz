.\"
.\" -*- nroff -*-
.\"
.\"  Copyright (c) Abraham vd Merwe <abz@blio.com>
.\"  All rights reserved.
.\"
.\"  Redistribution and use in source and binary forms, with or without
.\"  modification, are permitted provided that the following conditions
.\"  are met:
.\"  1. Redistributions of source code must retain the above copyright
.\"     notice, this list of conditions and the following disclaimer.
.\"
.\"  2. Redistributions in binary form must reproduce the above copyright
.\"     notice, this list of conditions and the following disclaimer in the
.\"     documentation and/or other materials provided with the distribution.
.\"  3. Neither the name of the author nor the names of other contributors
.\"     may be used to endorse or promote products derived from this software
.\"     without specific prior written permission.
.\"
.\"  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
.\"  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
.\"  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\"  ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\"  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\"  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\"  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
.\"  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\"  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\"  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.TH BATCH 3abz  "September 2005" Unix "Library calls"
.SH NAME
batch_create, batch_add, batch_append, batch_destroy, batch_commit \-
batch processing.
.SH LIBRARIES
Abz Library (-labz), Debug Library (-ldebug)
.SH SYNOPSIS
.nf
.B #include <abz/batch.h>
.sp
.BI "int batch_create(struct batch *" batch ", int " flags ", const char *" fmt ", ...);
.nl
.BI "int batch_add(struct batch *" batch ",const char *" fmt ", ...);
.nl
.BI "int batch_append(struct batch *" batch ",const char *" fmt ", ...);
.nl
.BI "void batch_destroy(struct batch *" batch ");
.nl
.BI "int batch_commit(struct batch *" batch ");
.fi
.SH DESCRIPTION
These functions enables the caller to construct a list of commands which are
then piped to the specified program's stdin file descriptor. The called
program's output is discarded.
.PP
\fBbatch_create()\fP creates a batch of commands. It should be called before
any of the other functions. The specified arguments specify the command that
should be executed. When executed, its output will be discarded and its stdin
file descriptor will be a file containing the list of commands added with
\fBbatch_add()\fP and \fBbatch_append()\fP.
.PP
The \fIflags\fP argument to \fBbatch_create()\fP is an OR of any of these:
.TP
.B BATCH_TESTING
Don't execute the batch, rather log the commands that would have been
executed. Useful for debugging.
.TP
.B BATCH_FORCE
Ignore program return code (i.e. do not return an error if the program fails).
.PP
\fBbatch_add()\fP adds a command to the batch. It takes a pointer to the
batch created with \fBbatch_create()\fP and a printf-style string as
parameters.
.PP
\fBbatch_append()\fP appends parameters to the last command in the batch.
.PP
\fBbatch_destroy()\fP free resources allocated for the batch.
.PP
\fBbatch_commit()\fP executes a batch of commands. This function
automatically free resources allocated for the batch, i.e. you should not
call \fBbatch_destroy()\fP after calling this function, except if it fails.
.SH "RETURN VALUES"
Except for \fBbatch_destroy()\fP, all of these functions returns 0 if
successful or -1 if some error occurred. Call \fBabz_get_error()\fP to
retrieve error messages.
.SH "NOTES"
None of the libabz routines are thread-safe. I'm not planning to change this
either! For more information, please see http://threading.2038bug.com/
.SH "SEE ALSO"
abz_get_error(3)
.SH "AUTHOR"
Written by Abraham vd Merwe <abz@blio.com>
